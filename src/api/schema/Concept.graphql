# Has dependencies + is depended upon with/by other concepts
# Represents an atomic knowledge, something that can be understood
# learning content cover one or several concepts
# Should we go for modelling something atomic

type Concept {
  _id: String!
  name: String!
  description: String
}

input CreateConceptPayload {
  name: String!
  description: String
}

input UpdateConceptPayload {
  name: String
  description: String
}

type DeleteConceptResult {
  success: Boolean!
  _id: String!
}

type Query {
  getConcept(_id: String!): Concept!
}

type Mutation {
  addConceptToDomain(domainId: String!, payload: CreateConceptPayload!): Concept!
  updateConcept(_id: String!, payload: UpdateConceptPayload!): Concept!
  deleteConcept(_id: String!): DeleteConceptResult!
}
