type Domain {
  _id: String!
  name: String!
  key: String!
  description: String
  concepts(options: DomainConceptsOptions!): DomainConceptsResults
  # subDomains(options: ListSubDomainsOptions!): SubDomainRelationship
  # taughtByResources(options: ListResourcesOptions!): # Relationship ?
}
input DomainConceptsOptions {
  pagination: PaginationOptions!
}

type DomainConceptsResults {
  items: [Concept!]!
}
# input ListSubDomainsOptions {
#   pagination: PaginationOptions
# }

input SearchDomainsOptions {
  query: String
  pagination: PaginationOptions!
}

type SearchDomainsResult {
  items: [Domain!]!
}

input CreateDomainPayload {
  name: String!
  key: String!
  description: String
}

input UpdateDomainPayload {
  name: String
  key: String
  description: String
}

type DeleteDomainResponse {
  _id: String!
  success: Boolean!
}

type Query {
  searchDomains(options: SearchDomainsOptions!): SearchDomainsResult!
  getDomainByKey(key: String!): Domain!
}

type Mutation {
  createDomain(payload: CreateDomainPayload!): Domain!
  updateDomain(id: String!, payload: UpdateDomainPayload!): Domain!
  deleteDomain(id: String!): DeleteDomainResponse!
}
